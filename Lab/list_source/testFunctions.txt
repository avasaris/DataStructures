
void List::sorted_insert(int value) {
	
	Node* new_node = new Node(value);	// Create new Node with desired value
	Node* previous_node = NULL;				// Create pointer for previous node, initially set to NULL

	/* list is empty */
	if(!head) {
		head = new_node;
		tail = new_node;
	}
	else {
		for( Iterator iter = begin(); !iter.is_equal(end()); iter.next_pos()) {
			if (iter.get_value() >= value) {
				// Check if new node will be new head of list
				if (iter.is_equal(head)) {
					head = new_node;
					new_node->set_next(iter.get_curr_pos());
					iter->set_prev(new_node);
				}
				else {
					// update next pointers
						new_node->set_next(iter.get_curr_pos());
						previous_node->set_next(new_node);
					// update previous pointers
						new_node->set_prev(previous_node);
						iter->set_prev(new_node);
				}
				break; 
			}
			// Check if new node should be placed at the end of the list
			else if (iter.is_equal(end())) {
				tail = new_node;
				iter->set_next(new_node);
				new_node->set_prev(iter.get_curr_pos());
			}
			previous_node = iter.get_curr_pos(); //update previous position
		}
	}
}